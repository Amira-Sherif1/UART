`timescale 1ns/1ps

module UART_tb;

    // Testbench signals
    reg clk;
    reg baud_reset;
    reg tx_reset;
    reg rx_reset;
    reg [2:0] Baud_Sel;
    reg tx_enable;
    reg rx_enable;
    reg load;
    reg [7:0] data_in;

    wire tx_busy;
    wire rx_busy;
    wire tx_error;
    wire rx_error;
    wire [7:0] out_reg;

    // Instantiate DUT (Device Under Test)
    top uut (
        .clk(clk),
        .baud_reset(baud_reset),
        .tx_reset(tx_reset),
        .rx_reset(rx_reset),
        .Baud_Sel(Baud_Sel),
        .tx_enable(tx_enable),
        .rx_enable(rx_enable),
        .load(load),
        .data_in(data_in),
        .tx_busy(tx_busy),
        .rx_busy(rx_busy),
        .tx_error(tx_error),
        .rx_error(rx_error),
        .out_reg(out_reg)
    );

    // Clock generator: 50 MHz -> 20 ns period
    always #10 clk = ~clk;

    initial begin
        // Initialize signals
        clk = 0;
        baud_reset = 1;
        tx_reset = 1;
        rx_reset = 1;
        Baud_Sel = 3'b000;  // Select a baud rate (depends on your Baud_Gen)
        tx_enable = 0;
        rx_enable = 0;
        load = 0;
        data_in = 8'b0;

        // Release resets after some time
        #50;
        baud_reset = 0;
        tx_reset = 0;
        rx_reset = 0;

        // Enable Tx and Rx
        tx_enable = 1;
        rx_enable = 1;

        // Wait a bit
        #100;

        // Send first byte
        data_in = 8'hA5;   // Example data: 10100101
        load = 1;
        #20;
        load = 0;

        // Wait until transmission is done
        wait(!tx_busy);
        #100;

        // Send second byte
        data_in = 8'h3C;   // Example data: 00111100
        load = 1;
        #20;
        load = 0;

        // Wait until transmission is done
        wait(!tx_busy);
        #500;

        // Finish simulation
        $stop;
    end

    // Monitor outputs
    initial begin
        $monitor("Time=%0t | TX_busy=%b RX_busy=%b TX_err=%b RX_err=%b OUT=0x%h",
                  $time, tx_busy, rx_busy, tx_error, rx_error, out_reg);
    end

endmodule

